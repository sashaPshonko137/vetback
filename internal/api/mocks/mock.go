// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	http "net/http"
	reflect "reflect"
	model "vetback/internal/model"
	service "vetback/internal/service"

	gomock "github.com/golang/mock/gomock"
)

// MockAnimalApi is a mock of AnimalApi interface.
type MockAnimalApi struct {
	ctrl     *gomock.Controller
	recorder *MockAnimalApiMockRecorder
}

// MockAnimalApiMockRecorder is the mock recorder for MockAnimalApi.
type MockAnimalApiMockRecorder struct {
	mock *MockAnimalApi
}

// NewMockAnimalApi creates a new mock instance.
func NewMockAnimalApi(ctrl *gomock.Controller) *MockAnimalApi {
	mock := &MockAnimalApi{ctrl: ctrl}
	mock.recorder = &MockAnimalApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnimalApi) EXPECT() *MockAnimalApiMockRecorder {
	return m.recorder
}

// NewCreate mocks base method.
func (m *MockAnimalApi) NewCreate() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCreate")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewCreate indicates an expected call of NewCreate.
func (mr *MockAnimalApiMockRecorder) NewCreate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCreate", reflect.TypeOf((*MockAnimalApi)(nil).NewCreate))
}

// NewDelete mocks base method.
func (m *MockAnimalApi) NewDelete() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDelete")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewDelete indicates an expected call of NewDelete.
func (mr *MockAnimalApiMockRecorder) NewDelete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDelete", reflect.TypeOf((*MockAnimalApi)(nil).NewDelete))
}

// NewGet mocks base method.
func (m *MockAnimalApi) NewGet() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGet")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewGet indicates an expected call of NewGet.
func (mr *MockAnimalApiMockRecorder) NewGet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGet", reflect.TypeOf((*MockAnimalApi)(nil).NewGet))
}

// NewGetMany mocks base method.
func (m *MockAnimalApi) NewGetMany() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGetMany")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewGetMany indicates an expected call of NewGetMany.
func (mr *MockAnimalApiMockRecorder) NewGetMany() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGetMany", reflect.TypeOf((*MockAnimalApi)(nil).NewGetMany))
}

// NewUpdate mocks base method.
func (m *MockAnimalApi) NewUpdate() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUpdate")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewUpdate indicates an expected call of NewUpdate.
func (mr *MockAnimalApiMockRecorder) NewUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUpdate", reflect.TypeOf((*MockAnimalApi)(nil).NewUpdate))
}

// SendPDF mocks base method.
func (m *MockAnimalApi) SendPDF(appointmentService service.AppointmentService, treatmentService service.TreatmentService) http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPDF", appointmentService, treatmentService)
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// SendPDF indicates an expected call of SendPDF.
func (mr *MockAnimalApiMockRecorder) SendPDF(appointmentService, treatmentService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPDF", reflect.TypeOf((*MockAnimalApi)(nil).SendPDF), appointmentService, treatmentService)
}

// MockUserApi is a mock of UserApi interface.
type MockUserApi struct {
	ctrl     *gomock.Controller
	recorder *MockUserApiMockRecorder
}

// MockUserApiMockRecorder is the mock recorder for MockUserApi.
type MockUserApiMockRecorder struct {
	mock *MockUserApi
}

// NewMockUserApi creates a new mock instance.
func NewMockUserApi(ctrl *gomock.Controller) *MockUserApi {
	mock := &MockUserApi{ctrl: ctrl}
	mock.recorder = &MockUserApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserApi) EXPECT() *MockUserApiMockRecorder {
	return m.recorder
}

// GetSessionInfo mocks base method.
func (m *MockUserApi) GetSessionInfo(arg0 *http.Request) (*model.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionInfo", arg0)
	ret0, _ := ret[0].(*model.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionInfo indicates an expected call of GetSessionInfo.
func (mr *MockUserApiMockRecorder) GetSessionInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionInfo", reflect.TypeOf((*MockUserApi)(nil).GetSessionInfo), arg0)
}

// NewDelete mocks base method.
func (m *MockUserApi) NewDelete() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDelete")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewDelete indicates an expected call of NewDelete.
func (mr *MockUserApiMockRecorder) NewDelete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDelete", reflect.TypeOf((*MockUserApi)(nil).NewDelete))
}

// NewGet mocks base method.
func (m *MockUserApi) NewGet() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGet")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewGet indicates an expected call of NewGet.
func (mr *MockUserApiMockRecorder) NewGet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGet", reflect.TypeOf((*MockUserApi)(nil).NewGet))
}

// NewGetMany mocks base method.
func (m *MockUserApi) NewGetMany() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGetMany")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewGetMany indicates an expected call of NewGetMany.
func (mr *MockUserApiMockRecorder) NewGetMany() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGetMany", reflect.TypeOf((*MockUserApi)(nil).NewGetMany))
}

// NewGetSessionInfo mocks base method.
func (m *MockUserApi) NewGetSessionInfo() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGetSessionInfo")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewGetSessionInfo indicates an expected call of NewGetSessionInfo.
func (mr *MockUserApiMockRecorder) NewGetSessionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGetSessionInfo", reflect.TypeOf((*MockUserApi)(nil).NewGetSessionInfo))
}

// NewSignIn mocks base method.
func (m *MockUserApi) NewSignIn() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSignIn")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewSignIn indicates an expected call of NewSignIn.
func (mr *MockUserApiMockRecorder) NewSignIn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSignIn", reflect.TypeOf((*MockUserApi)(nil).NewSignIn))
}

// NewSignOut mocks base method.
func (m *MockUserApi) NewSignOut() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSignOut")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewSignOut indicates an expected call of NewSignOut.
func (mr *MockUserApiMockRecorder) NewSignOut() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSignOut", reflect.TypeOf((*MockUserApi)(nil).NewSignOut))
}

// NewSignUp mocks base method.
func (m *MockUserApi) NewSignUp() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSignUp")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewSignUp indicates an expected call of NewSignUp.
func (mr *MockUserApiMockRecorder) NewSignUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSignUp", reflect.TypeOf((*MockUserApi)(nil).NewSignUp))
}

// NewUpdate mocks base method.
func (m *MockUserApi) NewUpdate() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUpdate")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewUpdate indicates an expected call of NewUpdate.
func (mr *MockUserApiMockRecorder) NewUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUpdate", reflect.TypeOf((*MockUserApi)(nil).NewUpdate))
}

// MockDiagnosisApi is a mock of DiagnosisApi interface.
type MockDiagnosisApi struct {
	ctrl     *gomock.Controller
	recorder *MockDiagnosisApiMockRecorder
}

// MockDiagnosisApiMockRecorder is the mock recorder for MockDiagnosisApi.
type MockDiagnosisApiMockRecorder struct {
	mock *MockDiagnosisApi
}

// NewMockDiagnosisApi creates a new mock instance.
func NewMockDiagnosisApi(ctrl *gomock.Controller) *MockDiagnosisApi {
	mock := &MockDiagnosisApi{ctrl: ctrl}
	mock.recorder = &MockDiagnosisApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiagnosisApi) EXPECT() *MockDiagnosisApiMockRecorder {
	return m.recorder
}

// NewCreate mocks base method.
func (m *MockDiagnosisApi) NewCreate() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCreate")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewCreate indicates an expected call of NewCreate.
func (mr *MockDiagnosisApiMockRecorder) NewCreate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCreate", reflect.TypeOf((*MockDiagnosisApi)(nil).NewCreate))
}

// NewDelete mocks base method.
func (m *MockDiagnosisApi) NewDelete() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDelete")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewDelete indicates an expected call of NewDelete.
func (mr *MockDiagnosisApiMockRecorder) NewDelete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDelete", reflect.TypeOf((*MockDiagnosisApi)(nil).NewDelete))
}

// NewGet mocks base method.
func (m *MockDiagnosisApi) NewGet() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGet")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewGet indicates an expected call of NewGet.
func (mr *MockDiagnosisApiMockRecorder) NewGet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGet", reflect.TypeOf((*MockDiagnosisApi)(nil).NewGet))
}

// NewGetMany mocks base method.
func (m *MockDiagnosisApi) NewGetMany() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGetMany")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewGetMany indicates an expected call of NewGetMany.
func (mr *MockDiagnosisApiMockRecorder) NewGetMany() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGetMany", reflect.TypeOf((*MockDiagnosisApi)(nil).NewGetMany))
}

// NewUpdate mocks base method.
func (m *MockDiagnosisApi) NewUpdate() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUpdate")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewUpdate indicates an expected call of NewUpdate.
func (mr *MockDiagnosisApiMockRecorder) NewUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUpdate", reflect.TypeOf((*MockDiagnosisApi)(nil).NewUpdate))
}

// MockTreatmentApi is a mock of TreatmentApi interface.
type MockTreatmentApi struct {
	ctrl     *gomock.Controller
	recorder *MockTreatmentApiMockRecorder
}

// MockTreatmentApiMockRecorder is the mock recorder for MockTreatmentApi.
type MockTreatmentApiMockRecorder struct {
	mock *MockTreatmentApi
}

// NewMockTreatmentApi creates a new mock instance.
func NewMockTreatmentApi(ctrl *gomock.Controller) *MockTreatmentApi {
	mock := &MockTreatmentApi{ctrl: ctrl}
	mock.recorder = &MockTreatmentApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTreatmentApi) EXPECT() *MockTreatmentApiMockRecorder {
	return m.recorder
}

// NewCreate mocks base method.
func (m *MockTreatmentApi) NewCreate() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCreate")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewCreate indicates an expected call of NewCreate.
func (mr *MockTreatmentApiMockRecorder) NewCreate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCreate", reflect.TypeOf((*MockTreatmentApi)(nil).NewCreate))
}

// NewDelete mocks base method.
func (m *MockTreatmentApi) NewDelete() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDelete")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewDelete indicates an expected call of NewDelete.
func (mr *MockTreatmentApiMockRecorder) NewDelete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDelete", reflect.TypeOf((*MockTreatmentApi)(nil).NewDelete))
}

// NewGet mocks base method.
func (m *MockTreatmentApi) NewGet() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGet")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewGet indicates an expected call of NewGet.
func (mr *MockTreatmentApiMockRecorder) NewGet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGet", reflect.TypeOf((*MockTreatmentApi)(nil).NewGet))
}

// NewGetMany mocks base method.
func (m *MockTreatmentApi) NewGetMany() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGetMany")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewGetMany indicates an expected call of NewGetMany.
func (mr *MockTreatmentApiMockRecorder) NewGetMany() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGetMany", reflect.TypeOf((*MockTreatmentApi)(nil).NewGetMany))
}

// NewUpdate mocks base method.
func (m *MockTreatmentApi) NewUpdate() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUpdate")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewUpdate indicates an expected call of NewUpdate.
func (mr *MockTreatmentApiMockRecorder) NewUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUpdate", reflect.TypeOf((*MockTreatmentApi)(nil).NewUpdate))
}

// MockAppointmentApi is a mock of AppointmentApi interface.
type MockAppointmentApi struct {
	ctrl     *gomock.Controller
	recorder *MockAppointmentApiMockRecorder
}

// MockAppointmentApiMockRecorder is the mock recorder for MockAppointmentApi.
type MockAppointmentApiMockRecorder struct {
	mock *MockAppointmentApi
}

// NewMockAppointmentApi creates a new mock instance.
func NewMockAppointmentApi(ctrl *gomock.Controller) *MockAppointmentApi {
	mock := &MockAppointmentApi{ctrl: ctrl}
	mock.recorder = &MockAppointmentApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppointmentApi) EXPECT() *MockAppointmentApiMockRecorder {
	return m.recorder
}

// NewCreate mocks base method.
func (m *MockAppointmentApi) NewCreate() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCreate")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewCreate indicates an expected call of NewCreate.
func (mr *MockAppointmentApiMockRecorder) NewCreate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCreate", reflect.TypeOf((*MockAppointmentApi)(nil).NewCreate))
}

// NewDelete mocks base method.
func (m *MockAppointmentApi) NewDelete() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDelete")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewDelete indicates an expected call of NewDelete.
func (mr *MockAppointmentApiMockRecorder) NewDelete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDelete", reflect.TypeOf((*MockAppointmentApi)(nil).NewDelete))
}

// NewGet mocks base method.
func (m *MockAppointmentApi) NewGet() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGet")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewGet indicates an expected call of NewGet.
func (mr *MockAppointmentApiMockRecorder) NewGet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGet", reflect.TypeOf((*MockAppointmentApi)(nil).NewGet))
}

// NewGetMany mocks base method.
func (m *MockAppointmentApi) NewGetMany() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGetMany")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewGetMany indicates an expected call of NewGetMany.
func (mr *MockAppointmentApiMockRecorder) NewGetMany() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGetMany", reflect.TypeOf((*MockAppointmentApi)(nil).NewGetMany))
}

// NewUpdate mocks base method.
func (m *MockAppointmentApi) NewUpdate() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUpdate")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// NewUpdate indicates an expected call of NewUpdate.
func (mr *MockAppointmentApiMockRecorder) NewUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUpdate", reflect.TypeOf((*MockAppointmentApi)(nil).NewUpdate))
}
